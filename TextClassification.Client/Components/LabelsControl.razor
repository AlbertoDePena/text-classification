@inject HttpClient Http

<div class="panel">
    <div class="header">
        Labels
    </div>
    <div class="content">
        <input class="filter-label-input" placeholder="Filter labels..." @oninput=OnFilterLabelChanged />
        <div class="labels">
            @if (FilteredLabels != null)
            {
                @foreach (var label in FilteredLabels)
                {
                    <div class="label" @key=label.Id @onclick="(() => OnLabelSelected(label))">@label.Name</div>
                }
            }
        </div>
    </div>
</div>

@code {
   
    [Parameter]
    public EventCallback<Label> LabelSelected { get; set; }

    private IReadOnlyList<Label> Labels { get; set; }

    private IReadOnlyList<Label> FilteredLabels { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Labels = await Http.GetJsonAsync<Label[]>("sample-data/labels.json");

        FilterLabels(filter: string.Empty);
    }

    private async Task OnLabelSelected(Label label) => await LabelSelected.InvokeAsync(label);

    private void OnFilterLabelChanged(ChangeEventArgs args) => FilterLabels(filter: args.Value as string);

    private void FilterLabels(string filter)
    {
        FilteredLabels = 
            string.IsNullOrWhiteSpace(filter) ?
            Labels :
            Labels.Where(l => l.Name.ToUpper().Contains(filter.ToUpper())).ToList();
    }
}